#! /usr/bin/env python

from __future__ import print_function

import argparse
import json
import os
import os.path
import shutil
import socket
import subprocess
import sys

### Global variables.

VERBOSE=False

### Global constants.

SERVER_JAR_URL           = ("https://github.com/genomizer/genomizer-downloads/"
                            "raw/genomizer-server-master/genomizer-server.jar")
SERVER_TESTER_JAR_URL    = ("https://github.com/genomizer/genomizer-downloads/"
                            "raw/genomizer-server-master/"
                            "genomizer-server-tester.jar")
RESOURCES_TAR_XZ_URL     = ("https://github.com/genomizer/genomizer-downloads/"
                            "releases/download/genomizer-server-resources/"
                            "genomizer-server-resources.tar.xz")
GENOMIZER_WEB_TAR_GZ_URL = ("https://github.com/genomizer/genomizer-web/"
                            "archive/master.tar.gz")
GENOMIZER_SQL_BASE_URL   = ("https://raw.githubusercontent.com/genomizer/"
                            "genomizer-server/master/sql/")
SQL_FILES                = ["genomizer_database_tables.sql",
                            "add_test_tuples.sql", "release_database_tuples.sql"]
GENOMIZER_TESTER_BASE_URL= ("https://raw.githubusercontent.com/genomizer/"
                            "genomizer-server/master/genomizer-server-tester/")
TEST_FILES               = ["test.fastq", "testFile33.txt", "test.sgr"]
CONTAINER_BASENAMES      =  ["genomizer-postgres", "genomizer-server",
                             "genomizer-nginx"]
### Helpers.

def die(msg):
    print("[fatal error] " + msg, file=sys.stderr)
    sys.exit(-1)

def debug(msg):
    if VERBOSE:
        print("[debug] " + msg)

def notice(msg):
    print("[genomizer-admin] " + msg)

def run(*args, **kwargs):
    "Run a given executable."

    shell  = kwargs.get("shell",  False)
    silent = kwargs.get("silent", False)

    debug("Executing '" + " ".join(args) + "'")
    if silent:
        p = subprocess.Popen(args, stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             shell=shell)
        return p.communicate()
    else:
        subprocess.call(args, shell=shell)

def shell(*args, **kwargs):
    "Like 'run', but with shell interpolation."

    run(*args, shell=True, **kwargs)

def check_root():
    "Check that we're running with superuser privileges."

    if os.geteuid() != 0:
        die("This command must be run as root!")

def is_installed(prog):
    "Check if a given program is installed; returns True or False."

    ver_opt = { "expect" : "-v", "openssl" : "version" }
    try:
        arg = ver_opt.get(prog, "--version")
        run(prog, arg, silent=True)
        return True
    except:
        return False

def host_ip():
    "Return the IP address of the current host as a string."

    return socket.gethostbyname(socket.gethostname())

def mkdir(dir):
    "Create a directory if it doesn't already exist."

    if not os.path.exists(dir):
        notice("Creating the '" + dir + "' directory.")
        os.mkdir(dir)

def docker_inspect(what, network=False):
    """Inspect a Docker image or container and return parsed JSON.

    Can return both 'None' and '[]' on error."""

    try:
        (out, err) = run(
            *(["docker"] +
              (["inspect"] if not network else ["network", "inspect"]) +
              [what]), silent=True)
        return json.loads(out)
    except:
        return None

def join_cwd(*paths):
    "Make a CWD-relative path absolute."

    return os.path.join(os.getcwd(), *paths)

### Initialisation.

class Configuration(object):
    "Parameters affecting a server instance."

    def __init__(self, ram, cpu, ports, tmp, data, certdir=None):
        self.ram     = ram   # MiB, -1 stands for unlimited
        self.cpu     = cpu   # -1 stands for unlimited
        self.ports   = ports
        self.tmp     = tmp
        self.data    = data
        self.certdir = certdir
        self.name    = None

    def update(self, ram, cpu, ports, tmp, data, certdir=None):
        self.ram     = (ram or self.ram)
        self.cpu     = (cpu or self.cpu)
        self.ports   = (ports[0] or self.ports[0],
                        ports[1] or self.ports[1],
                        ports[2] or self.ports[2])
        self.tmp     = (tmp or self.tmp)
        self.data    = (data or self.data)
        self.certdir = (certdir or self.certdir)

    def parse(self):
        def parse_binds(json):
            binds = json[0]["HostConfig"]["Binds"]
            ret = {}
            for s in binds:
                ss = s.split(":")
                ret[ss[1]] = ss[0]
            return ret

        def get_json(name):
            cont = "genomizer-" + name + "-" + self.name
            json  = docker_inspect(cont)
            if not json:
                die("The container '" + cont + "' is missing.\n" +
                    "The '" + self.name +
                    "' server instance is probably not running.")
            return json

        json_server = get_json("server")
        self.ram = json_server[0]["HostConfig"]["Memory"]
        self.ram = (self.ram if not self.ram == 0 else -1)
        self.cpu = json_server[0]["HostConfig"]["CpuShares"]
        self.cpu = (self.cpu if not self.cpu == 0 else -1)
        binds = parse_binds(json_server)
        self.tmp = binds["/tmp"]
        self.data = binds["/data"]

        json_nginx = get_json("nginx")
        binds = parse_binds(json_nginx)
        self.certdir = binds["/etc/nginx/ssl"]

        def lookup_port(num, json=json_nginx):
            return int(json[0]["NetworkSettings"]
                       ["Ports"][str(num)+"/tcp"][0]["HostPort"])
        self.ports   = (lookup_port(7000, json_server),
                        lookup_port(80), lookup_port(443))

    def pprint(self):
        maybe_unlimited = lambda v : "" if not v == -1 else " (unlimited)"

        print("RAM Limit:   " + str(self.ram) + maybe_unlimited(self.ram))
        print("CPU Limit:   " + str(self.cpu) + maybe_unlimited(self.cpu))
        print("Server Port: " + str(self.ports[0]))
        print("HTTP Port:   " + str(self.ports[1]))
        print("HTTPS Port:  " + str(self.ports[2]))
        print("Temp dir:    " + self.tmp)
        print("Data dir:    " + self.data)
        print("PGDATA dir:  " + os.path.join(self.data, "pgdata"))
        print("Cert dir:    " + self.certdir)

    def __repr__(self):
        return "%s(%s)" % (
            "Configuration",
            ", ".join(["%s=%r" % (k,v) for (k,v) in self.__dict__.items()]))

CONFIGURATIONS = {
    "production" : Configuration(-1, -1, (7000, 80, 443),
                                 "/Data/tmp", "/Data/production-data"),
    "dev1"       : Configuration(4000, 1, (7001, 8081, 4431),
                                 "/Data/development-1-tmp",
                                 "/Data/development-1-data"),
    "dev2"       : Configuration(4000, 1, (7002, 8082, 4432),
                                 "/Data/development-2-tmp",
                                 "/Data/development-2-data"),
    "dev3"       : Configuration(4000, 1, (7003, 8083, 4433),
                                 "/Data/development-3-tmp",
                                 "/Data/development-3-data"),
    "web"        : Configuration(4000, 1, (7004, 8084, 4434),
                                 "/Data/development-web-tmp",
                                 "/Data/development-web-data"),
    "client"     : Configuration(4000, 1, (7005, 8085, 4435),
                                 "/Data/development-client-tmp",
                                 "/Data/development-client-data")
}


def configuration(target):
    "Given a target server instance name, return a Configuration object."

    if target not in CONFIGURATIONS:
        die("Unknown configuration name: " + target + ".")
    else:
        conf = CONFIGURATIONS[target]
        conf.name = target
        return conf

def sanity_check(subcommand):
    "Check that the system we run on is properly configured."

    def check_installed(prog):
        if not is_installed(prog):
            die(prog.capitalize() + " is not installed, "
                + ("please run 'genomizer-admin install-prereqs'."
                   if subcommand != "install-prereqs"
                   else "can't install prerequisites."))

    if subcommand == "help":
        return

    # Check that required programs are installed.
    if subcommand == "install-prereqs":
        check_installed("yum")
    else:
        check_installed("expect")
        check_installed("curl")
        check_installed("wget")
        check_installed("openssl")
        check_installed("docker")

def check_server_instance_deployed(conf):
    "Check that a given server instance is deployed"

    if not all(docker_inspect(prefix + "-" + conf.name)
               for prefix in CONTAINER_BASENAMES):
        die("The server instance '" + conf.name + "' is not deployed!\n"
            "Use the 'deploy' command to deploy to deploy the instance.\n"
            "Use the 'destroy' command to start from a clean slate.\n"
            "If you're seeing weird errors, try 'sudo service docker restart'.'")

def check_server_instance_not_deployed(conf):
    "Check that a given server instance is not deployed"

    if any(docker_inspect(prefix + "-" + conf.name)
           for prefix in CONTAINER_BASENAMES):
        die("The server instance '" + conf.name + "' is already deployed!\n"
            "Use the 'start' command if the instance is stopped and "
            "you just want to restart it.\n"
            "Use the 'destroy' command to start from a clean slate.")

### Core functionality.

def install_prereqs(args):
    "The 'install-prereqs' command."

    def yum_install(pkg):
        if not is_installed(pkg):
            notice("Installing '" + pkg + "'...")
            run("yum", "-y", "install", pkg)

    check_root()
    notice("Running 'yum update'...")
    run("yum", "-y", "update")
    yum_install("expect")
    yum_install("curl")
    yum_install("wget")
    yum_install("openssl")

    if not is_installed("docker"):
        notice("Installing 'docker'...")
        shell("curl -sSL https://get.docker.com/ | sh")

        notice("Starting the Docker service...")
        run("service", "docker", "start", silent=True)

        notice("Done. Run 'sudo docker run hello-world' to verify that "
               "Docker installed correctly.'")

def deploy(args, conf):
    "The 'deploy' command."

    # Update the configuration object.
    conf.update(args.ram, args.cpu,
                (args.server_port, args.http_port, args.port),
                args.tmp, args.data, args.cert)

    # Sanity checks.
    def check_script_location():
        "Check that we're being run from the correct directory."

        dirs  = ["genomizer-nginx", "genomizer-postgres",
                 "genomizer-server", "genomizer-server-tester"]
        files = [ d + "/Dockerfile" for d in dirs]
        for p in dirs + files:
            if not os.path.exists(p):
                die("This command must be run from the "
                    "'genomizer-docker' directory.")

    check_root()
    check_script_location()
    check_server_instance_not_deployed(conf)
    mkdir(conf.data)
    mkdir(os.path.join(conf.data, "pgdata"))
    mkdir(conf.tmp)

    # Download files.
    mkdir(conf.name)
    os.chdir(conf.name)

    def download(name, url, unpack=None):
        if unpack is not None and os.path.exists(unpack):
            notice("The directory '" + unpack + "' already exists. "
                   + "Skipping download...")
            return

        if os.path.exists(name):
            notice("The file '" + name + "' already exists. "
                   + "Skipping download...")
            return
        else:
            notice("Downloading the '" + name + "' file...")
            shell("wget -O " + name + " " + url)
            if unpack is not None:
                notice("Unpacking the '" + name + "' file to '"
                       + unpack + "'...")
                os.mkdir(unpack)
                shell("tar xf " + name + " -C " + unpack
                      + " --strip-components 1")

    download("genomizer-server.jar", SERVER_JAR_URL)
    download("genomizer-server-tester.jar", SERVER_TESTER_JAR_URL)
    for f in TEST_FILES:
        download(f, GENOMIZER_TESTER_BASE_URL + f)
    download("resources.tar.xz", RESOURCES_TAR_XZ_URL, "resources")
    download("genomizer-web.tar.gz", GENOMIZER_WEB_TAR_GZ_URL, "genomizer-web")
    mkdir("sql")
    os.chdir("sql")
    for f in SQL_FILES:
        download(f, GENOMIZER_SQL_BASE_URL + f)
    os.chdir("..")

    os.chdir("..")

    # Build Docker images.
    def build_image(path, tag):
        os.chdir(path)
        notice("Building the '" + tag + "' image...")
        shell("docker build -t " + tag + " .")
        os.chdir("..")

    build_image("genomizer-postgres",      "genomizer/postgres")
    build_image("genomizer-nginx",         "genomizer/nginx")
    build_image("genomizer-server",        "genomizer/server")
    build_image("genomizer-server-tester", "genomizer/server-tester")

    # Start containers.
    def container_name(basename):
        return (basename + "-" + conf.name)
    def network_name():
        return ("genomizer-" + conf.name)

    def start_container(tag, dirname,
                        paths = {}, ro_paths = {}, ports = {},
                        other_args = []):
        os.chdir(dirname)
        name = container_name(dirname)

        def make_v_args(mappings, suf):
            ret = []
            for k0,v in mappings.items():
                k = (join_cwd(k0) if not os.path.isabs(k0) else k0)
                ret += ["-v", k + ":" + v + suf]
            return ret

        def make_ports_args():
            ret = []
            for k,v in ports.items():
                ret += ["-p", str(k) + ":" + str(v)]
            return ret

        notice("Starting the '" + name + "' container...")
        run(*(["docker", "run", "-d"] + make_v_args(paths, "") +
              make_v_args(ro_paths, ":ro") +
              make_ports_args() +
              ["--net="+network_name()] +
              other_args +
              ["--name=" + name, tag]))
        os.chdir("..")

    def generate_certificates():
        certs = ["genomizer.crt", "genomizer.csr", "genomizer.key"]
        def cert_exist(certdir):
            return all(os.path.exists(os.path.join(certdir, cert))
                       for cert in certs)

        if conf.certdir is not None:
            if not cert_exist(conf.certdir):
                die("No certificate at the target location!\n" +
                    "Was looking in directory '" + conf.certdir +
                    "' for file '" + cert + "'.")
            return

        os.chdir(conf.name)
        conf.certdir = join_cwd("cert")
        if not cert_exist(conf.certdir):
            notice("No existing certificates provided. "
                   + "Generating fresh certificates...")
            shell("expect -f ../scripts/generate_certificates.expect",
                  silent=True)
        else:
            notice("Using existing certificates in directory '" +
                   conf.certdir + "'")
        os.chdir("..")

    def create_network():
        name = network_name()
        if not docker_inspect(name, network=True):
            notice("Creating the '" + name + "' Docker network...")
            run("docker", "network", "create", name)

    def fixup_config(filename, *replacements):
        tmp = filename + ".tmp"
        with open(tmp, "w") as outfile:
            with open(filename, "r") as infile:
                for line in infile:
                    for (old, new) in replacements:
                        line = line.replace(old, new)
                    outfile.write(line)
        os.remove(filename)
        os.rename(tmp, filename)

    confdir = join_cwd(conf.name)
    ip = host_ip()

    # Config files must be retouched a bit.
    settings_cfg = os.path.join(confdir, "settings.cfg")
    shutil.copyfile("genomizer-server/settings.cfg", settings_cfg)
    fixup_config(settings_cfg,
                 ("postgres", container_name("genomizer-postgres")),
                 ("localhost", ip))

    nginx_conf = os.path.join(confdir, "nginx.conf")
    shutil.copyfile("genomizer-nginx/nginx.conf", nginx_conf)
    fixup_config(nginx_conf,
                 ("genomizer-server", container_name("genomizer-server")),
                 ("localhost", ip))

    generate_certificates()
    create_network()

    start_container(
        tag = "genomizer/postgres",
        dirname = "genomizer-postgres",
        paths =
        {os.path.join(conf.data, "pgdata"):"/var/lib/postgresql/data"},
        ro_paths =
        {"docker-entrypoint-initdb.d":"/docker-entrypoint-initdb.d",
         os.path.join(confdir,"sql"):"/sql", "/etc/localtime":"/etc/localtime"})
    start_container(
        tag = "genomizer/server",
        dirname = "genomizer-server",
        paths =
        {os.path.join(confdir, "genomizer-server.jar"):"/genomizer-server.jar",
         os.path.join(confdir, "resources"):"/resources",
         os.path.join(confdir, "settings.cfg"):"/settings.cfg",
         conf.data:"/data",
         conf.tmp:"/tmp"},
        ro_paths = {"/etc/localtime":"/etc/localtime"},
        other_args = ((["-m", str(conf.ram)] if conf.ram != -1 else []) +
                      (["-c", str(conf.cpu)] if conf.cpu != -1 else [])),
        ports = {conf.ports[0]:7000})
    start_container(
        tag = "genomizer/nginx",
        dirname = "genomizer-nginx",
        paths = {},
        ro_paths =
        {os.path.join(confdir, "genomizer-web/app")
         :"/usr/share/nginx/html",
         os.path.join(confdir, "nginx.conf") : "/etc/nginx/nginx.conf",
         conf.certdir:"/etc/nginx/ssl",
         "/etc/localtime":"/etc/localtime"},
        ports = {conf.ports[1]:80, conf.ports[2]:443})

    # TODO: debug why database is flaky after init.
    restart(args, conf)

def info(args, conf):
    "The 'info' command."

    check_root()
    conf.parse()
    conf.pprint()

def for_all_containers(conf, cmd, ignore_missing=False, reverse=False):
    "Common implementation of the 'start', 'stop' and 'restart' commands."

    conts = CONTAINER_BASENAMES
    if reverse:
        conts = reversed(conts)
    for prefix in conts:
        cont = prefix + "-" + conf.name
        json = docker_inspect(cont)
        if json:
            container_id = json[0]["Id"]
            notice("Running 'docker " + cmd + " " + cont + "'")
            run("docker", cmd, container_id)
        elif not ignore_missing:
            die("The container " + cont + " is missing!")

def stop(args, conf):
    "The 'stop' command."

    check_root()
    check_server_instance_deployed(conf)
    for_all_containers(conf, "stop", reverse=True)

def start(args, conf):
    "The 'start' command."

    check_root()
    check_server_instance_deployed(conf)
    for_all_containers(conf, "start")

def restart(args, conf):
    "The 'restart' command."

    check_root()
    check_server_instance_deployed(conf)
    for_all_containers(conf, "stop", reverse=True)
    for_all_containers(conf, "start")

def backup(args, conf):
    "The 'backup' command."

    die("Not implemented!")

    check_root()
    check_server_instance_deployed(conf)
    # pg_dump -U genomizer -h localhost -Fd -f /vagrant/pgdump genomizer
    # docker cp ~/pgdump genomizer-postgres-production:/pgdump
    # pg_restore -c -Fd pgdump -d genomizerdb -U postgres

    cont = "genomizer-postgres-" + conf.name
    shell("docker exec" + cont + "pg_dump -U genomizer -h localhost -Fd" +
          "-f /pgdump")
    shell("docker cp " + cont + ":/pgdump")

def destroy(args, conf):
    "The 'destroy' command."

    check_root()
    for_all_containers(conf, "stop", reverse=True, ignore_missing=True)
    for_all_containers(conf, "rm", ignore_missing=True)

def shell_cmd(args, conf):
    "The 'shell' command."

    check_root()
    check_server_instance_deployed(conf)
    cont = "genomizer-" + args.container + "-" + conf.name
    run("docker", "exec", "-ti", cont, "bash")

def logs(args, conf):
    "The 'logs' command."

    check_root()
    check_server_instance_deployed(conf)
    cont = "genomizer-" + args.container + "-" + conf.name
    run("docker", "logs", cont)

def debug_cmd(args, conf):
    "The 'debug' command."

    check_root()
    test_files = []
    for f in TEST_FILES:
        test_files += ["-v", join_cwd(conf.name,f)+ ":/" + f]

    cmd = (["docker", "run", "--rm", "-it", "-v",
           join_cwd(conf.name, "genomizer-server-tester.jar") +
           ":/genomizer-server-tester.jar",
           "-v", "/etc/localtime:/etc/localtime:ro"] +
           test_files +
           ["--net", "genomizer-" + conf.name,
            "--name", "genomizer-server-tester-" + conf.name,
            "genomizer/server-tester", "bash"])

    run(*cmd)

### Argument parsing.

def parse_args():
    "Parse command-line arguments."

    parser = argparse.ArgumentParser(
        description="Automates Genomizer server deployment and backup.",
        epilog=("Server instance can be one of: "
                "production (default), web, client, dev1, dev2, dev3."))

    parser.add_argument("-v", "--verbose", action='store_true'
                        , help="toggle verbose output")

    subparsers = parser.add_subparsers(title="subcommands", dest="subcommand")

    def add_target_argument(parser):
        parser.add_argument(
            "target", nargs="?", default="production",
            choices=["production", "web", "client", "dev1", "dev2", "dev3"],
            help="target configuration (default: 'production')")

    def add_subcommand(name, help, func,
                       add_args=lambda x:None, target_arg=True):
        subparser = subparsers.add_parser(name, help=help)
        add_args(subparser)
        if target_arg:
            add_target_argument(subparser)
        subparser.set_defaults(func=func)
        return subparser

    add_subcommand("install-prereqs",
                   help="Install software required for this script to work",
                   func=install_prereqs, target_arg=False)

    def deploy_args(parser_deploy):
        parser_deploy.add_argument("-p", "--port", type=int,
                                   help="port to listen on (HTTPS)")
        parser_deploy.add_argument("--http-port", type=int,
                                   help="port to listen on (HTTP)")
        parser_deploy.add_argument("--server-port", type=int,
                                   help="port to listen on (Server)")
        parser_deploy.add_argument("-t", "--tmp", type=str,
                                   help="path to temp directory")
        parser_deploy.add_argument("-d", "--data", type=str,
                                   help="path to data directory")
        parser_deploy.add_argument("-c", "--cert", type=str,
                                   help="path to the certs directory")
        parser_deploy.add_argument("--cpu", type=int,
                                   help="CPU limit")
        parser_deploy.add_argument("--ram", type=int,
                                   help="RAM limit")
    add_subcommand("deploy",
                   help="Deploy the given server configuration",
                   func=deploy, add_args=deploy_args)

    add_subcommand("info",
                   help="Print information about deployed server instances",
                   func=info)

    add_subcommand("stop",
                   help="Stop a running server instance",
                   func=stop)

    add_subcommand("start",
                   help="Start a stopped server instance",
                   func=start)

    add_subcommand("restart",
                   help="Restart a running server instance",
                   func=restart)

    def backup_args(parser_backup):
        parser_backup.add_argument("-o", "--output", type=str,
                                   help="path to output directory")
    add_subcommand("backup",
                   help="Backup a running server instance",
                   func=backup,
                   add_args=backup_args)

    add_subcommand("destroy",
                   help="Stop and remove a running server instance",
                   func=destroy)

    def shell_args(parser_shell):
        parser_shell.add_argument(
            "-c", "--container", choices=["server", "postgres", "nginx"],
            default="server",
            help="choose which container to attach to (default:server)")
    add_subcommand("shell",
                   help="Attach a shell to a running server instance",
                   func=shell_cmd, add_args=shell_args)

    def logs_args(parser_logs):
        parser_logs.add_argument(
            "-c", "--container", choices=["server", "postgres", "nginx"],
            default="server",
            help="choose which container to attach to (default:server)")
    add_subcommand("logs",
                   help="Show logs from a running server instance",
                   func=logs, add_args=logs_args)

    add_subcommand("debug",
                   help="Run a debugging shell (advanced)",
                   func=debug_cmd)

    def help_args(parser_help):
        parser_help.add_argument(
            "cmd", help="command name", nargs='?', default="",
            choices=[c for c in subparsers.choices] + [""])
    def print_help(args):
        if args.cmd != '':
            subparsers.choices[args.cmd].print_help()
        else:
            parser.print_help())
    add_subcommand("help",
                   help="Show the help message for the given command",
                   func=print_help,
                   add_args=help_args,
                   target_arg=False)

    return parser.parse_args()

### Entry point.

def main():
    "Program entry point."

    global VERBOSE

    args = parse_args()
    VERBOSE = args.verbose
    sanity_check(args.subcommand)

    func_args = [args]
    if (args.subcommand not in ["install-prereqs", "help"]):
        conf = configuration(args.target)
        func_args += [conf]

    args.func(*func_args)

if __name__ == "__main__":
    main()
